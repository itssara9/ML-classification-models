Comparing performance based on algorithm accuracy:
Top Performers: K-Nearest Neighbors (KNN) and Kernel SVM achieved the highest accuracy of 0.93
Close Behind:Random Forest and Decision Tree come in at a close second with 0.91 accuracy.
Middle Ground:Support Vector Machine (SVM) and Naive Bayes performed well with 0.9 accuracy.
Lower Performer:Logistic Regression had the lowest accuracy among the listed algorithms at 0.89

General formula(Generalization):
# Import necessary libraries
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import confusion_matrix, accuracy_score

# Function to build and evaluate a model
def build_and_evaluate_model(X, y, Classifier, test_size=0.2, random_state=42):
    """
    Builds and evaluates a classification model.
    
    Parameters:
    - X: Features dataset.
    - y: Target variable.
    - Classifier: The classification algorithm class to use.
    - test_size: The proportion of the dataset to include in the test split.
    - random_state: Controls the shuffling applied to the data before applying the split.
    
    Returns:
    - model: The trained model.
    - accuracy: Accuracy of the model on the test set.
    """
    # Splitting the dataset into the Training set and Test set
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=test_size, random_state=random_state)
    
    # Feature Scaling
    sc = StandardScaler()
    X_train = sc.fit_transform(X_train)
    X_test = sc.transform(X_test)
    
    # Initializing the Classifier
    model = Classifier()
    
    # Fitting the Classifier to the Training set
    model.fit(X_train, y_train)
    
    # Predicting the Test set results
    y_pred = model.predict(X_test)
    
    # Making the Confusion Matrix
    cm = confusion_matrix(y_test, y_pred)
    print("Confusion Matrix:")
    print(cm)
    
    # Calculating the accuracy
    accuracy = accuracy_score(y_test, y_pred)
    print("Accuracy:", accuracy)
    
    return model, accuracy

# Example usage with a Random Forest Classifier
from sklearn.ensemble import RandomForestClassifier

# Assuming X and y are your features and target variable
# X, y = load_your_data()

# Build and evaluate the model
model, accuracy = build_and_evaluate_model(X, y, RandomForestClassifier, test_size=0.25, random_state=0)

# Print the model and its accuracy
print("Model:", model)
print("Model Accuracy:", accuracy)